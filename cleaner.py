# -*- coding: utf-8 -*-
"""Preprocessing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yjJpOv5gWjkRVHIyy1_VRNpBJWLWUd3P
"""
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import re
import nltk
import time
import pickle
import operator
import contractions 
import string


class Preprocessing():

  def __init__(self,data,embeddings,Basic_Clean=True,Contractions=True):
    self.data = data['text']
    self.embeddings = embeddings

    #Controls
    self.Basic_Clean = Basic_Clean
    self.Contractions = Contractions

    #Auto-Run
    self.main()


  def dictionary(self,X):    # Builds a dictionary of words
    tweets = X.apply(lambda s: s.split()).values      
    vocab = {}

    for tweet in tweets:
        for word in tweet:
            try:
                vocab[word] += 1
            except KeyError:
                vocab[word] = 1                
    return vocab

  def check_coverage(self,X): #Evaluation Function
    
    vocab = self.dictionary(X)     
    covered = {}
    not_covered = {}    
    n_covered = 0
    n_not_covered = 0

    
    for word in vocab:
        try:
            covered[word] = self.embeddings[word]
            n_covered += vocab[word]
        except:
            not_covered[word] = vocab[word]
            n_not_covered += vocab[word]
            
    vocab_coverage = len(covered) / len(vocab)
    text_coverage = (n_covered / (n_covered + n_not_covered))
    
    not_covered_sorted = sorted(not_covered.items(), key=operator.itemgetter(1))[::-1]
    return not_covered_sorted, vocab_coverage, text_coverage

  def basic_cleaning(self,text):

    '''remove text in square brackets,remove links,remove punctuation
    and remove words containing numbers. '''
    text = re.sub('\[.*?\]', '', text)
    text = re.sub('https?://\S+|www\.\S+', '', text)
    text = re.sub('<.*?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\n', '', text)
    text = re.sub('\w*\d\w*', '', text)
    
    return text
    
  def main(self):
    
    #Data Cleaning
    if bool(self.Basic_Clean) == 1:
      self.data = self.data.apply(lambda x : self.basic_cleaning(x))
    if bool(self.Contractions) == 1:
      self.data = self.data.apply(lambda x : contractions.fix(x))

    #Evaluation
    not_covered_sorted, vocab_coverage, text_coverage = self.check_coverage(self.data)

    self.not_covered_sorted = not_covered_sorted
    self.vocab_coverage = vocab_coverage
    self.text_coverage = text_coverage